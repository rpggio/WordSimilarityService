{
  "EDITOR_STATE": {
    "allProjectFiles": {
      "e2f4cab2-ae38-49cf-9c45-df8e19de3dad": {
        "id": "e2f4cab2-ae38-49cf-9c45-df8e19de3dad",
        "parent": null,
        "name": "WordSimilarity",
        "type": "DIRECTORY",
        "isDirectory": true,
        "children": [
          "af4c8b7f-fb11-4d22-a0dc-c803259ae14b",
          "60573f28-a7cd-4ac9-8458-6635abc9fda7",
          "d42924da-d9c9-4f3e-9b72-2320010adbfd"
        ],
        "isRemovable": false,
        "filePath": "WordSimilarity"
      },
      "af4c8b7f-fb11-4d22-a0dc-c803259ae14b": {
        "id": "af4c8b7f-fb11-4d22-a0dc-c803259ae14b",
        "parent": "e2f4cab2-ae38-49cf-9c45-df8e19de3dad",
        "name": "nltk-similarities.py",
        "type": "PYTHON_LAMBDA",
        "isDirectory": false,
        "children": [],
        "isRemovable": true,
        "filePath": "WordSimilarity/nltk-similarities.py",
        "code": "import nltk\nimport json\nfrom nltk.corpus import wordnet as wn\n\nnltk.data.path.append(\"/tmp\")\nnltk.download(\"wordnet\", download_dir = \"/tmp\")\n\ndef pairings(source):\n  result = []\n  for p1 in range(len(source)):\n          for p2 in range(p1+1, len(source)):\n                  result.append([source[p1],source[p2]])\n  return result\n\ndef parseWordsFromRequest(event):\n    if not \"queryStringParameters\" in event:\n        return []\n    queryString = event[\"queryStringParameters\"]\n    if queryString is None or not \"words\" in queryString:\n        return []\n    return [w.strip() for w in queryString[\"words\"].split(',')]\n\ndef handler(event, context):\n    words = parseWordsFromRequest(event)\n    if(len(words) < 2 or len(words) > 40):\n        return {\n            \"statusCode\": 400,\n            \"body\": json.dumps({\n                \"message\": \"query parameter 'words' must have between 2 and 40 values\"\n            })\n        }\n\n    synsets = [{ \"word\": w, \"lemma\": wn.synsets(w, 'n')[0] } for w in words]\n    pairs = pairings(synsets)\n    similarities = [[p[0][\"word\"], p[1][\"word\"], p[0][\"lemma\"].wup_similarity(p[1][\"lemma\"])] for p in pairs]\n\n    return {\n        \"body\": json.dumps(list(similarities))\n    }\n",
        "config": {
          "runtime": "python3.6",
          "handler": "handler",
          "timeout": 60,
          "memory": 128,
          "layers": []
        },
        "triggers": [
          {
            "resourceName": "apigusWest2NLTKSimilaritiesnltkSimilaritiesget",
            "config": {}
          }
        ],
        "testCases": {
          "ff3f30ae-15ef-412b-9d60-86007e192a3e": {
            "id": "ff3f30ae-15ef-412b-9d60-86007e192a3e",
            "name": "empty request",
            "functionId": "af4c8b7f-fb11-4d22-a0dc-c803259ae14b",
            "event": "{\n    \"queryStringParameters\": {}\n} "
          },
          "0dc2cfbf-d220-4e06-8650-125604910af8": {
            "id": "0dc2cfbf-d220-4e06-8650-125604910af8",
            "name": "valid request",
            "functionId": "af4c8b7f-fb11-4d22-a0dc-c803259ae14b",
            "event": "{\n    \"queryStringParameters\": {\n        \"words\": \"cat,dog,car,boat,motor\"\n    }\n} "
          }
        }
      },
      "60573f28-a7cd-4ac9-8458-6635abc9fda7": {
        "id": "60573f28-a7cd-4ac9-8458-6635abc9fda7",
        "parent": "e2f4cab2-ae38-49cf-9c45-df8e19de3dad",
        "name": "__init__.py",
        "type": "PYTHON_FILE",
        "isDirectory": false,
        "children": [],
        "isRemovable": true,
        "filePath": "WordSimilarity/__init__.py",
        "code": ""
      },
      "d42924da-d9c9-4f3e-9b72-2320010adbfd": {
        "id": "d42924da-d9c9-4f3e-9b72-2320010adbfd",
        "parent": "e2f4cab2-ae38-49cf-9c45-df8e19de3dad",
        "name": "cortical-similarities.py",
        "type": "PYTHON_LAMBDA",
        "isDirectory": false,
        "children": [],
        "isRemovable": true,
        "filePath": "WordSimilarity/cortical-similarities.py",
        "code": "import requests\nimport json\n\ndef pairings(source):\n  result = []\n  for p1 in range(len(source)):\n          for p2 in range(p1+1, len(source)):\n                  result.append([source[p1],source[p2]])\n  return result\n\ndef parseWordsFromRequest(event):\n    if not \"queryStringParameters\" in event:\n        return []\n    queryString = event[\"queryStringParameters\"]\n    if queryString is None or not \"words\" in queryString:\n        return []\n    return [w.strip() for w in queryString[\"words\"].split(',')]\n\ndef handler(event, context):\n    words = parseWordsFromRequest(event)\n    if(len(words) < 2 or len(words) > 30):\n        return {\n            \"statusCode\": 400,\n            \"body\": json.dumps({\n                \"message\": \"query parameter 'words' must have between 2 and 40 values\"\n            })\n        }\n\n    pairs = pairings(words)\n    body = [ [{ \"term\": p[0] },{ \"term\": p[1] }] for p in pairs]\n    print(data)\n    response = requests.request(\n        method = \"POST\",\n        url = \"http://api.cortical.io/rest/compare/bulk\",\n        params = {\n            \"retina_name\": \"en_associative\"\n        },\n        data = json.dumps(body),\n        headers = {\n            \"content-type\": \"application/json\"\n            # \"api-key\": \"c992aea0-c472-11e9-8f72-af685da1b20e\"\n        }\n        )\n\n    responseRows = json.loads(response.text)\n    jaccards = [r[\"jaccardDistance\"] for r in responseRows]\n    distances = list(zip(pairs, jaccards))\n    distances.sort(key=lambda dist: dist[1])\n\n    return { \"body\": json.dumps(distances) }\n",
        "config": {
          "runtime": "python3.6",
          "handler": "handler",
          "timeout": 60,
          "memory": 128,
          "layers": []
        },
        "triggers": [
          {
            "resourceName": "apigusWest2CorticalSimilaritiescorticalSimilaritiesget",
            "config": {}
          }
        ],
        "testCases": {
          "becff0f8-8297-4d32-8b59-14e19bb70c1d": {
            "id": "becff0f8-8297-4d32-8b59-14e19bb70c1d",
            "name": "Valid",
            "functionId": "d42924da-d9c9-4f3e-9b72-2320010adbfd",
            "event": "{\n    \"queryStringParameters\": {\n        \"words\": \"cat,dog,car,boat,motor\"\n    }\n} "
          }
        }
      }
    },
    "deletedFiles": [],
    "rootNode": "e2f4cab2-ae38-49cf-9c45-df8e19de3dad",
    "openFiles": [
      "d42924da-d9c9-4f3e-9b72-2320010adbfd"
    ],
    "currentFileId": "d42924da-d9c9-4f3e-9b72-2320010adbfd",
    "resources": {
      "apigusWest2WordSimilaritieswordSimilaritiesget": {
        "name": "apigusWest2WordSimilaritieswordSimilaritiesget",
        "type": "API_GATEWAY",
        "config": {
          "selectedRegion": "us-west-2",
          "apiMode": 0,
          "apiName": "Word Similarities",
          "endpointType": "EDGE",
          "resourceMode": 0,
          "resourceName": "word-similarities",
          "resourcePath": "/word-similarities",
          "restMethod": "GET",
          "proxyIntegration": true,
          "enableCORS": false,
          "stageMode": 0,
          "stageName": "dev",
          "mode": 0
        }
      },
      "apigusWest2NLTKSimilaritiesnltkSimilaritiesget": {
        "name": "apigusWest2NLTKSimilaritiesnltkSimilaritiesget",
        "type": "API_GATEWAY",
        "config": {
          "selectedRegion": "us-west-2",
          "apiMode": 0,
          "apiName": "NLTK Similarities",
          "endpointType": "EDGE",
          "resourceMode": 0,
          "resourceName": "nltk-similarities",
          "resourcePath": "/nltk-similarities",
          "restMethod": "GET",
          "proxyIntegration": true,
          "enableCORS": false,
          "stageMode": 0,
          "stageName": "dev",
          "mode": 0
        }
      },
      "apigusWest2CorticalSimilaritiescorticalSimilaritiesget": {
        "name": "apigusWest2CorticalSimilaritiescorticalSimilaritiesget",
        "type": "API_GATEWAY",
        "config": {
          "selectedRegion": "us-west-2",
          "apiMode": 0,
          "apiName": "Cortical Similarities",
          "endpointType": "EDGE",
          "resourceMode": 0,
          "resourceName": "cortical-similarities",
          "resourcePath": "/cortical-similarities",
          "restMethod": "GET",
          "proxyIntegration": true,
          "enableCORS": false,
          "stageMode": 0,
          "stageName": "dev",
          "mode": 0
        }
      }
    },
    "customTemplate": {
      "dialect": null,
      "definitions": {}
    },
    "envVariables": [
      {
        "lambdaId": "all",
        "varKey": "SIGMA_AWS_ACC_ID",
        "varValue": null,
        "shouldPersist": false,
        "displayOnly": false,
        "editable": false
      },
      {
        "lambdaId": "af4c8b7f-fb11-4d22-a0dc-c803259ae14b",
        "varKey": "PYTHONPATH",
        "varValue": "/var/runtime:/var/task/WordSimilarity",
        "shouldPersist": true,
        "displayOnly": false,
        "editable": true
      },
      {
        "lambdaId": "d42924da-d9c9-4f3e-9b72-2320010adbfd",
        "varKey": "PYTHONPATH",
        "varValue": "/var/runtime:/var/task/WordSimilarity",
        "shouldPersist": true,
        "displayOnly": false,
        "editable": true
      }
    ],
    "packageJSON": {
      "dependencies": {
        "nltk": {
          "name": "nltk",
          "version": "3.4.4",
          "dev": false,
          "language": "python"
        },
        "requests": {
          "name": "requests",
          "version": "2.22.0",
          "dev": false,
          "language": "python"
        }
      }
    }
  },
  "PROJECT_META": {
    "projectName": "WordSimilarity",
    "projectDescription": "",
    "projectVersion": "1.0.0",
    "projectRegion": "us-west-2",
    "platform": "AWS",
    "platformRegions": {},
    "lastSave": 1566526362075
  },
  "VCS_STATE": {
    "provider": "GitHub",
    "repo": {
      "name": "WordSimilarity",
      "url": "https://github.com/ryascl/WordSimilarityService"
    }
  }
}